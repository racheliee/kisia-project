// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserTypes {
  ADMIN
  STANDARD_USER
  PREMIUM_USER
}

enum DETECTOR {
  DATABASE
  API
  AI_MODEL
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  password      String // hashed password
  email         String    @unique
  type          UserTypes @default(STANDARD_USER)
  dailyRequests Int       @default(0) // number of requests made by the user in a day; resets at 00:00
  requestsLimit Int       @default(3) // number of requests allowed per day for free users
  lastLogin     DateTime? // last login time
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // many-to-many relation with Url
  urlsAccessed History[]
}

model Url {
  id              Int      @id @default(autoincrement())
  url             String   @unique
  isMalicious     Boolean
  detectedBy      DETECTOR @default(DATABASE)
  urlResult       Boolean? // url model result
  staticResult    Boolean? // static model result
  dynamicResult   Boolean? // dynamic model result
  accessCount     Int      @default(1) // number of times this url has been asked for verification
  falsePos        Int      @default(0) // number of times it was reported as a false positives
  falseNeg        Int      @default(0) // number of times it was reported as a false negatives
  confidenceScore Float? // used with ai models
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model History {
  id              Int      @id @default(autoincrement())
  userId          String
  url             String
  isMalicious     Boolean
  detectedBy      DETECTOR
  confidenceScore Float?
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model ConfusionMatrix {
  id        Int      @id @default(autoincrement())
  modelType DETECTOR
  truePos   Int      @default(0)
  trueNeg   Int      @default(0)
  falsePos  Int      @default(0)
  falseNeg  Int      @default(0)
  f1Score   Float?
  createdAt DateTime @default(now())
}

model RequestSummary {
  id            Int      @id @default(autoincrement())
  period        String // day, week, month
  periodStart   DateTime
  totalRequests Int
  aiRequests    Int
  createdAt     DateTime @default(now())
}
